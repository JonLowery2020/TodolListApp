{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","InputGroup","className","onSubmit","e","preventDefault","editTask","id","Form","Container","Row","Col","xs","FormControl","type","placeholder","value","onChange","target","ButtonGroup","Button","Variant","onClick","name","viewTemplate","defaultChecked","completed","toggleTaskCompleted","htmlFor","DropdownButton","variant","Dropdown","Item","Divider","deleteTask","ListGroup","as","TaskForm","setName","md","lg","addTask","alert","Control","autoComplete","block","FilterButton","aria-pressed","isPressed","setFilter","style","border","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","filter","tasks","setTasks","darkMode","setDarkMode","useEffect","json","localStorage","getItem","currentMode","JSON","parse","document","body","classList","add","remove","updatedTasks","map","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","newTask","nanoid","aria-labelledby","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.030e9f29.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport { ListGroup, InputGroup, FormControl, DropdownButton, Dropdown, \n  ToggleButton, Container, Row, Col, ButtonGroup, Button, Form} from \"react-bootstrap\";\n\n\n\nconst Todo = (props) => {\n    //hooks\n    const[isEditing, setEditing] = useState(false);\n\n    const [newName, setNewName] = useState('')\n    \n    const handleChange = (e) => {\n        setNewName(e.target.value);\n    }\n\n    const handleSubmit =(e) => {\n        e.preventDefault();\n        props.editTask(props.id, newName);\n        setNewName(\"\");\n        setEditing(false);\n    }\n    // conditional rendering\n    const editingTemplate = (   \n        <InputGroup className=\"stack-small\" onSubmit={handleSubmit}>\n          <Form>\n          <Container>\n            <Row>      \n              <Col xs={12}>\n                <FormControl \n                    id={props.id} \n                    className=\"todo-text\" \n                    type=\"text\"\n                    placeholder = \"Update task...\"\n                    value = {newName}\n                    onChange = {handleChange}\n                    />\n              </Col>\n              <Col >\n                <ButtonGroup className=\"btn-group\">\n                  <Button \n                      type=\"button\" \n                      className=\"btn todo-cancel\"\n                      Variant=\"secondary\"\n                      onClick={()=> setEditing(false)}\n                      >\n                    Cancel\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\n                  </Button>\n                  <Button type=\"submit\" className=\"btn btn__primary todo-edit\"  >\n                    Save\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\n                  </Button>\n                </ButtonGroup>\n              </Col>\n            </Row>\n          </Container>\n          </Form>\n        </InputGroup>\n      );\n      const viewTemplate = (\n        <InputGroup className=\"stack-small\">\n         <Container> \n           <Row>\n             <Col className=\"align-self-start\" xs={2}>\n               \n                <input\n                  className=\"checkbox-circle\"\n                  id={props.id}\n                  type=\"checkbox\"\n                  defaultChecked={props.completed}\n                  onChange={() => props.toggleTaskCompleted(props.id)}\n                />\n              \n             </Col>\n             <Col>\n              <label className=\"todo-label\" htmlFor={props.id}>\n                  {props.name}\n                </label>\n             </Col>\n              <DropdownButton className=\"bg-transparent\" variant=\"transparant\">\n                <Dropdown.Item  \n                  type=\"button\" \n                  className=\"btn\"\n                  onClick ={()=> setEditing(true)}>\n                  <i className=\"fa fa-edit\"></i> Edit\n                  <span className=\"visually-hidden\">{props.name}</span>\n                </Dropdown.Item>\n                <Dropdown.Divider/>\n                <Dropdown.Item\n                  type=\"button\"\n                  className=\"btn btn__danger\"\n                  onClick={() => props.deleteTask(props.id)}\n                >\n                  <i className=\"fa fa-trash-o\"></i> Delete\n                  <span className=\"visually-hidden\">{props.name}</span>\n                </Dropdown.Item>\n              </DropdownButton>\n           </Row>        \n         </Container>\n            \n        </InputGroup>\n      );\n    return(\n        <ListGroup.Item  as=\"li\" className= \"todo\">{ isEditing ? editingTemplate : viewTemplate}\n        </ListGroup.Item>\n    )\n}\n\nexport default Todo;","import  React, {useState}  from \"react\";\nimport {Button, Container, Form , Row, Col} from 'react-bootstrap';\n\nconst TaskForm = (props) =>{\n\n    const [name,setName] = useState('');\n\n    const handleChange = (e) => {\n        setName(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n      if (name !== \" \"){\n        e.preventDefault();\n        props.addTask(name);\n        setName(\" \");\n      }else{\n        e.preventDefault();\n        setName(\" \");\n        alert(\"Oop! You forgot to enter a task.\");\n      }\n      \n    }\n\n    return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col xs={10} md={8} lg={6}>\n          <Form onSubmit={handleSubmit} className=\"inputform\">\n            <Form.Control\n              type=\"text\"\n              id=\"new-todo-input\"\n              className=\"input\"\n              name=\"text\"\n              autoComplete=\"off\"\n              placeholder = \"New Task...\"\n              value = {name}\n              onChange= {handleChange}\n            />\n            <Button type=\"submit\" className=\"btn addTask\" block >\n              Add Task\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n    );\n}\n\nexport default TaskForm;","import React from \"react\";\nimport {Button, Container, Row, Col, ButtonGroup} from 'react-bootstrap';\n\nconst FilterButton = (props) => {\n    return (\n        <Button\n          type=\"button\" \n          className=\"toggle-btn  bg-transparent\" \n          aria-pressed={props.isPressed}\n          onClick= {()=> props.setFilter(props.name)}\n          style={{border: 0 }}>\n          <span className=\"visually-hidden\">Show </span>\n          <span>{props.name}</span>\n          <span className=\"visually-hidden\"> tasks</span>\n        </Button>\n        \n    );\n}\n\nexport default FilterButton;","import React, { useState, useEffect } from \"react\";\nimport {Container, Row, Col, ButtonGroup, ListGroup } from 'react-bootstrap';\nimport Todo from \"./components/Todo\";\nimport TaskForm from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from 'nanoid';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES  = Object.keys(FILTER_MAP);\nfunction App(props) {\n\n\nconst[filter,setFilter] = useState('All');\nconst [tasks, setTasks] = useState(props.tasks);\nconst [darkMode, setDarkMode] = useState(false);\n\n//persisting dark mode using local storage. Check to see if client was previously in darkMode using useEffect hook\nuseEffect(()=>{\n  const json = localStorage.getItem(\"todo-dark-mode\");\n  const currentMode =JSON.parse(json);\n\n  if(currentMode){\n      setDarkMode(true);\n  } else{\n      setDarkMode(false);\n  }\n},[]);\n\n// apply a dark class to the body's classList with useEffect\nuseEffect(()=>{\n  if (darkMode) {\n      document.body.classList.add(\"dark\");\n  } else {\n      document.body.classList.remove(\"dark\");\n\n  } \n},[darkMode]);\n\n  const addTask = (name) => {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed:false\n    };\n    \n    setTasks([...tasks,newTask]);\n\n  }\n    \n\n  const toggleTaskCompleted = (id) => {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id){\n        //use spread operator to make a new object\n        //whose 'completed' property has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n\n  }\n\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n\n  }\n\n  const editTask = (id, newName) => {\n    const editedTaskList = tasks.map(task =>{\n      if (id === task.id ){\n        return {...task, name:newName}\n      }\n      return task\n    })\n    setTasks(editedTaskList);\n  }\nconst taskList = tasks\n.filter(FILTER_MAP[filter])\n.map(task => (\n    <Todo \n        id={task.id} \n        name={task.name} \n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask ={deleteTask}\n        editTask= {editTask}\n      />\n));\n\nconst filterList = FILTER_NAMES.map(name => (\n  <FilterButton \n      key= {name} \n      name={name}\n      isPressed= {name === filter}\n      setFilter = {setFilter}\n   />\n));\n\n\n   \n   const tasksNoun = taskList.length !==1 ? 'tasks' : 'task'\n\n   const headingText = `${taskList.length} ${tasksNoun} `;\n\n  \n\n  return (\n\n    <Container className=\"todoapp \">\n      <Row className=\"justify-content-center title\">\n        <Col xs={\"auto\"}>\n          <h1>T o D o</h1>\n        </Col>\n        <Col xs={\"auto\"}>\n          <i className=\" fa fa-lightbulb-o\" onClick={() => setDarkMode(!darkMode)}></i>\n        </Col>\n      </Row>\n      <Row className=\" Approws\">\n        <Col className=\"Appcols\">\n          <TaskForm addTask={addTask} />\n        </Col>\n      </Row>\n      <Row className=\"d-flex justify-content-center Approws\">\n        <Col xs={10} md={8} lg={6}>\n        <ListGroup\n          className=\"todo-list \"\n          aria-labelledby=\"list-heading\"\n        >\n          {taskList}\n        </ListGroup>\n        </Col>\n      </Row>\n      <Row className=\"filters  d-flex justify-content-center Approws\">      \n          <ButtonGroup className=\"btn-group\">\n            {filterList}\n          </ButtonGroup>\n      </Row>\n      <Row className=\"d-flex justify-content-center   Approws\">\n          <p id=\"list-heading\">\n            {headingText}\n          </p>\n      </Row>\n    </Container>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst DATA = [];\n\n\nReactDOM.render(\n    <App tasks= {DATA} />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}